// https://json-schema.org/understanding-json-schema
// TS types generated by gpt-4o
// TODO: review

type JSONSchemaType =
  | 'string'
  | 'number'
  | 'integer'
  | 'object'
  | 'array'
  | 'boolean'
  | 'null';

type JSONSchemaFormat =
  | 'date-time'
  | 'email'
  | 'hostname'
  | 'ipv4'
  | 'ipv6'
  | 'uri'
  | string;

interface JSONSchema {
  $id?: string;
  $schema?: string;
  $ref?: string;
  title?: string;
  description?: string;
  default?: any;
  examples?: any[];
  multipleOf?: number;
  maximum?: number;
  exclusiveMaximum?: number;
  minimum?: number;
  exclusiveMinimum?: number;
  maxLength?: number;
  minLength?: number;
  pattern?: string;
  additionalItems?: boolean | JSONSchema;
  items?: JSONSchema | JSONSchema[];
  maxItems?: number;
  minItems?: number;
  uniqueItems?: boolean;
  contains?: JSONSchema;
  maxProperties?: number;
  minProperties?: number;
  required?: string[];
  additionalProperties?: boolean | JSONSchema;
  definitions?: {
    [key: string]: JSONSchema;
  };
  properties?: {
    [key: string]: JSONSchema;
  };
  patternProperties?: {
    [key: string]: JSONSchema;
  };
  dependencies?: {
    [key: string]: JSONSchema | string[];
  };
  propertyNames?: JSONSchema;
  const?: any;
  enum?: any[];
  type?: JSONSchemaType | JSONSchemaType[];
  format?: JSONSchemaFormat;
  contentMediaType?: string;
  contentEncoding?: string;
  if?: JSONSchema;
  then?: JSONSchema;
  else?: JSONSchema;
  allOf?: JSONSchema[];
  anyOf?: JSONSchema[];
  oneOf?: JSONSchema[];
  not?: JSONSchema;
}

// Example usage
const exampleSchema: JSONSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  title: "Example",
  type: "object",
  properties: {
    name: {
      type: "string"
    },
    age: {
      type: "integer",
      minimum: 0
    }
  },
  required: ["name"]
};